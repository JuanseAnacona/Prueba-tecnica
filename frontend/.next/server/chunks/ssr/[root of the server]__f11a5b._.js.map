{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file:///home/juan/Documentos/Prueba%20tecnica/frontend/public/src/services/api.tsx"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:3000',\r\n});\r\n\r\n\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('access_token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport default api;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACvB,SAAS;AACX;AAGA,IAAI,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC5B,MAAM,QAAQ,aAAa,OAAO,CAAC;IACnC,IAAI,OAAO;QACT,OAAO,OAAO,CAAC,aAAa,GAAG,CAAC,OAAO,EAAE,OAAO;IAClD;IACA,OAAO;AACT;uCAEe"}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///home/juan/Documentos/Prueba%20tecnica/frontend/app/dashboard/page.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport api from \"../../public/src/services/api\";\r\n\r\n// Definir la estructura de las preguntas\r\ninterface Question {\r\n  questionText: string;\r\n  options: string[];\r\n  correctAnswer: string;\r\n}\r\n\r\nexport default function Dashboard() {\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [currentQuestion, setCurrentQuestion] = useState<number>(0);\r\n  const [score, setScore] = useState<number>(0);\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const response = await api.get(\"/questions?category=React\");\r\n        setQuestions(response.data); // Asumimos que el backend devuelve un array de preguntas\r\n      } catch (error) {\r\n        alert(\"Error al cargar las preguntas\");\r\n      }\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, []);\r\n\r\n  const handleAnswer = (answer: string) => {\r\n    if (answer === questions[currentQuestion].correctAnswer) {\r\n      setScore(score + 10);\r\n    }\r\n    if (currentQuestion < questions.length - 1) {\r\n      setCurrentQuestion(currentQuestion + 1);\r\n    } else {\r\n      alert(`Juego terminado. Puntaje: ${score}`);\r\n      router.push(\"/ranking\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Juego de Preguntas</h1>\r\n      {questions.length > 0 && (\r\n        <div>\r\n          <h2>{questions[currentQuestion].questionText}</h2>\r\n          {questions[currentQuestion].options.map((option, index) => (\r\n            <button key={index} onClick={() => handleAnswer(option)}>\r\n              {option}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n      <p>Puntaje: {score}</p>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AASe,SAAS;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAc,EAAE;IACzD,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IAC/D,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IAC3C,MAAM,SAAS,CAAA,GAAA,8HAAA,CAAA,YAAS,AAAD;IAEvB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,iBAAiB;YACrB,IAAI;gBACF,MAAM,WAAW,MAAM,iIAAA,CAAA,UAAG,CAAC,GAAG,CAAC;gBAC/B,aAAa,SAAS,IAAI,GAAG,yDAAyD;YACxF,EAAE,OAAO,OAAO;gBACd,MAAM;YACR;QACF;QAEA;IACF,GAAG,EAAE;IAEL,MAAM,eAAe,CAAC;QACpB,IAAI,WAAW,SAAS,CAAC,gBAAgB,CAAC,aAAa,EAAE;YACvD,SAAS,QAAQ;QACnB;QACA,IAAI,kBAAkB,UAAU,MAAM,GAAG,GAAG;YAC1C,mBAAmB,kBAAkB;QACvC,OAAO;YACL,MAAM,CAAC,0BAA0B,EAAE,OAAO;YAC1C,OAAO,IAAI,CAAC;QACd;IACF;IAEA,qBACE,8OAAC;;0BACC,8OAAC;0BAAG;;;;;;YACH,UAAU,MAAM,GAAG,mBAClB,8OAAC;;kCACC,8OAAC;kCAAI,SAAS,CAAC,gBAAgB,CAAC,YAAY;;;;;;oBAC3C,SAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,sBAC/C,8OAAC;4BAAmB,SAAS,IAAM,aAAa;sCAC7C;2BADU;;;;;;;;;;;0BAMnB,8OAAC;;oBAAE;oBAAU;;;;;;;;;;;;;AAGnB"}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}